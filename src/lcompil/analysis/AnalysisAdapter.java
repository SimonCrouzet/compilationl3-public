/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.analysis;

import java.util.*;
import lcompil.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVaretfctProgram(ADecVaretfctProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFctProgram(ADecFctProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVariablesOptdecvar(ADecVariablesOptdecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationVariablesMultiplesListedecvar(ADeclarationVariablesMultiplesListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarerVariableListedecvar(ADeclarerVariableListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreVariablesListedecvarChainee(AMoreVariablesListedecvarChainee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALastListedecvarChainee(ALastListedecvarChainee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarEntierDecvar(ADecvarEntierDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarTableauDecvar(ADecvarTableauDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedecfoncRecListedecfonc(AListedecfoncRecListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedecfoncFinalListedecfonc(AListedecfoncFinalListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarinstrDecfonc(ADecvarinstrDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrDecfonc(AInstrDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASansparamListeparam(ASansparamListeparam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAvecparamListeparam(AAvecparamListeparam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstraffectInstr(AInstraffectInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrblocInstr(AInstrblocInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrsiInstr(AInstrsiInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrtantqueInstr(AInstrtantqueInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrappelInstr(AInstrappelInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrretourInstr(AInstrretourInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrecritureInstr(AInstrecritureInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrvideInstr(AInstrvideInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstraffect(AInstraffect node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrbloc(AInstrbloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALinstrecListeinst(ALinstrecListeinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALinstfinalListeinst(ALinstfinalListeinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAvecsinonInstrif(AAvecsinonInstrif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASanssinonInstrif(ASanssinonInstrif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrelseif(AInstrelseif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrwhile(AInstrwhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrappel(AInstrappel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrreturn(AInstrreturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrwrite(AInstrwrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrvoid(AInstrvoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExpr(AOuExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExpr(ASimpleExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExprOu(AEtExprOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprOu(ASimpleExprOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalExprEt(AEgalExprEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExprEt(AInfExprEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprEt(ASimpleExprEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExprEgal(APlusExprEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsExprEgal(AMoinsExprEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprEgal(ASimpleExprEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplierExprPlus(AMultiplierExprPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiviserExprPlus(ADiviserExprPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprPlus(ASimpleExprPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonExprMult(ANonExprMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprMult(ASimpleExprMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreExprComplete(ANombreExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExprComplete(AVarExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireExprComplete(ALireExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesesExprComplete(AParenthesesExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfctExprComplete(AAppelfctExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVartabVar(AVartabVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarsimpleVar(AVarsimpleVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementsmultiplesListexpr(AElementsmultiplesListexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListexpr(AVideListexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementsmultiplesListexprChainee(AElementsmultiplesListexprChainee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListexprChainee(AVideListexprChainee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAvecparamAppelfct(AAvecparamAppelfct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInferior(TInferior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNo(TNo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLCrochet(TLCrochet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRCrochet(TRCrochet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLAccolade(TLAccolade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRAccolade(TRAccolade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElseif(TElseif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWrite(TWrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificator(TIdentificator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
