/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.node;

import lcompil.analysis.*;

@SuppressWarnings("nls")
public final class AVartabVar extends PVar
{
    private TIdentificator _identificator_;
    private TLCrochet _lCrochet_;
    private PExpr _expr_;
    private TRCrochet _rCrochet_;

    public AVartabVar()
    {
        // Constructor
    }

    public AVartabVar(
        @SuppressWarnings("hiding") TIdentificator _identificator_,
        @SuppressWarnings("hiding") TLCrochet _lCrochet_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRCrochet _rCrochet_)
    {
        // Constructor
        setIdentificator(_identificator_);

        setLCrochet(_lCrochet_);

        setExpr(_expr_);

        setRCrochet(_rCrochet_);

    }

    @Override
    public Object clone()
    {
        return new AVartabVar(
            cloneNode(this._identificator_),
            cloneNode(this._lCrochet_),
            cloneNode(this._expr_),
            cloneNode(this._rCrochet_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVartabVar(this);
    }

    public TIdentificator getIdentificator()
    {
        return this._identificator_;
    }

    public void setIdentificator(TIdentificator node)
    {
        if(this._identificator_ != null)
        {
            this._identificator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identificator_ = node;
    }

    public TLCrochet getLCrochet()
    {
        return this._lCrochet_;
    }

    public void setLCrochet(TLCrochet node)
    {
        if(this._lCrochet_ != null)
        {
            this._lCrochet_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCrochet_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRCrochet getRCrochet()
    {
        return this._rCrochet_;
    }

    public void setRCrochet(TRCrochet node)
    {
        if(this._rCrochet_ != null)
        {
            this._rCrochet_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCrochet_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identificator_)
            + toString(this._lCrochet_)
            + toString(this._expr_)
            + toString(this._rCrochet_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identificator_ == child)
        {
            this._identificator_ = null;
            return;
        }

        if(this._lCrochet_ == child)
        {
            this._lCrochet_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rCrochet_ == child)
        {
            this._rCrochet_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identificator_ == oldChild)
        {
            setIdentificator((TIdentificator) newChild);
            return;
        }

        if(this._lCrochet_ == oldChild)
        {
            setLCrochet((TLCrochet) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rCrochet_ == oldChild)
        {
            setRCrochet((TRCrochet) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
