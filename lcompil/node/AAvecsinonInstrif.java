/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.node;

import lcompil.analysis.*;

@SuppressWarnings("nls")
public final class AAvecsinonInstrif extends PInstrif
{
    private TIf _if_;
    private PExpr _expr_;
    private TThen _then_;
    private PInstrbloc _instrbloc_;
    private PInstrelseif _instrelseif_;

    public AAvecsinonInstrif()
    {
        // Constructor
    }

    public AAvecsinonInstrif(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PInstrbloc _instrbloc_,
        @SuppressWarnings("hiding") PInstrelseif _instrelseif_)
    {
        // Constructor
        setIf(_if_);

        setExpr(_expr_);

        setThen(_then_);

        setInstrbloc(_instrbloc_);

        setInstrelseif(_instrelseif_);

    }

    @Override
    public Object clone()
    {
        return new AAvecsinonInstrif(
            cloneNode(this._if_),
            cloneNode(this._expr_),
            cloneNode(this._then_),
            cloneNode(this._instrbloc_),
            cloneNode(this._instrelseif_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAvecsinonInstrif(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PInstrbloc getInstrbloc()
    {
        return this._instrbloc_;
    }

    public void setInstrbloc(PInstrbloc node)
    {
        if(this._instrbloc_ != null)
        {
            this._instrbloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instrbloc_ = node;
    }

    public PInstrelseif getInstrelseif()
    {
        return this._instrelseif_;
    }

    public void setInstrelseif(PInstrelseif node)
    {
        if(this._instrelseif_ != null)
        {
            this._instrelseif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instrelseif_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._expr_)
            + toString(this._then_)
            + toString(this._instrbloc_)
            + toString(this._instrelseif_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._instrbloc_ == child)
        {
            this._instrbloc_ = null;
            return;
        }

        if(this._instrelseif_ == child)
        {
            this._instrelseif_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._instrbloc_ == oldChild)
        {
            setInstrbloc((PInstrbloc) newChild);
            return;
        }

        if(this._instrelseif_ == oldChild)
        {
            setInstrelseif((PInstrelseif) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
