/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.node;

import lcompil.analysis.*;

@SuppressWarnings("nls")
public final class AOuExpr extends PExpr
{
    private PExpr _expr_;
    private TOr _or_;
    private PExprOu _exprOu_;

    public AOuExpr()
    {
        // Constructor
    }

    public AOuExpr(
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PExprOu _exprOu_)
    {
        // Constructor
        setExpr(_expr_);

        setOr(_or_);

        setExprOu(_exprOu_);

    }

    @Override
    public Object clone()
    {
        return new AOuExpr(
            cloneNode(this._expr_),
            cloneNode(this._or_),
            cloneNode(this._exprOu_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOuExpr(this);
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PExprOu getExprOu()
    {
        return this._exprOu_;
    }

    public void setExprOu(PExprOu node)
    {
        if(this._exprOu_ != null)
        {
            this._exprOu_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprOu_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._or_)
            + toString(this._exprOu_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._exprOu_ == child)
        {
            this._exprOu_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._exprOu_ == oldChild)
        {
            setExprOu((PExprOu) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
