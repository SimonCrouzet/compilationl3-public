/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.node;

import lcompil.analysis.*;

@SuppressWarnings("nls")
public final class AInstrbloc extends PInstrbloc
{
    private TLAccolade _lAccolade_;
    private PListeinst _listeinst_;
    private TRAccolade _rAccolade_;

    public AInstrbloc()
    {
        // Constructor
    }

    public AInstrbloc(
        @SuppressWarnings("hiding") TLAccolade _lAccolade_,
        @SuppressWarnings("hiding") PListeinst _listeinst_,
        @SuppressWarnings("hiding") TRAccolade _rAccolade_)
    {
        // Constructor
        setLAccolade(_lAccolade_);

        setListeinst(_listeinst_);

        setRAccolade(_rAccolade_);

    }

    @Override
    public Object clone()
    {
        return new AInstrbloc(
            cloneNode(this._lAccolade_),
            cloneNode(this._listeinst_),
            cloneNode(this._rAccolade_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstrbloc(this);
    }

    public TLAccolade getLAccolade()
    {
        return this._lAccolade_;
    }

    public void setLAccolade(TLAccolade node)
    {
        if(this._lAccolade_ != null)
        {
            this._lAccolade_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lAccolade_ = node;
    }

    public PListeinst getListeinst()
    {
        return this._listeinst_;
    }

    public void setListeinst(PListeinst node)
    {
        if(this._listeinst_ != null)
        {
            this._listeinst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeinst_ = node;
    }

    public TRAccolade getRAccolade()
    {
        return this._rAccolade_;
    }

    public void setRAccolade(TRAccolade node)
    {
        if(this._rAccolade_ != null)
        {
            this._rAccolade_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rAccolade_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lAccolade_)
            + toString(this._listeinst_)
            + toString(this._rAccolade_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lAccolade_ == child)
        {
            this._lAccolade_ = null;
            return;
        }

        if(this._listeinst_ == child)
        {
            this._listeinst_ = null;
            return;
        }

        if(this._rAccolade_ == child)
        {
            this._rAccolade_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lAccolade_ == oldChild)
        {
            setLAccolade((TLAccolade) newChild);
            return;
        }

        if(this._listeinst_ == oldChild)
        {
            setListeinst((PListeinst) newChild);
            return;
        }

        if(this._rAccolade_ == oldChild)
        {
            setRAccolade((TRAccolade) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
