/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.node;

import lcompil.analysis.*;

@SuppressWarnings("nls")
public final class ADecvarTableauDecvar extends PDecvar
{
    private TInt _int_;
    private TIdentificator _identificator_;
    private TLCrochet _lCrochet_;
    private TNumber _number_;
    private TRCrochet _rCrochet_;

    public ADecvarTableauDecvar()
    {
        // Constructor
    }

    public ADecvarTableauDecvar(
        @SuppressWarnings("hiding") TInt _int_,
        @SuppressWarnings("hiding") TIdentificator _identificator_,
        @SuppressWarnings("hiding") TLCrochet _lCrochet_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TRCrochet _rCrochet_)
    {
        // Constructor
        setInt(_int_);

        setIdentificator(_identificator_);

        setLCrochet(_lCrochet_);

        setNumber(_number_);

        setRCrochet(_rCrochet_);

    }

    @Override
    public Object clone()
    {
        return new ADecvarTableauDecvar(
            cloneNode(this._int_),
            cloneNode(this._identificator_),
            cloneNode(this._lCrochet_),
            cloneNode(this._number_),
            cloneNode(this._rCrochet_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecvarTableauDecvar(this);
    }

    public TInt getInt()
    {
        return this._int_;
    }

    public void setInt(TInt node)
    {
        if(this._int_ != null)
        {
            this._int_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int_ = node;
    }

    public TIdentificator getIdentificator()
    {
        return this._identificator_;
    }

    public void setIdentificator(TIdentificator node)
    {
        if(this._identificator_ != null)
        {
            this._identificator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identificator_ = node;
    }

    public TLCrochet getLCrochet()
    {
        return this._lCrochet_;
    }

    public void setLCrochet(TLCrochet node)
    {
        if(this._lCrochet_ != null)
        {
            this._lCrochet_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCrochet_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TRCrochet getRCrochet()
    {
        return this._rCrochet_;
    }

    public void setRCrochet(TRCrochet node)
    {
        if(this._rCrochet_ != null)
        {
            this._rCrochet_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCrochet_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._int_)
            + toString(this._identificator_)
            + toString(this._lCrochet_)
            + toString(this._number_)
            + toString(this._rCrochet_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._int_ == child)
        {
            this._int_ = null;
            return;
        }

        if(this._identificator_ == child)
        {
            this._identificator_ = null;
            return;
        }

        if(this._lCrochet_ == child)
        {
            this._lCrochet_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._rCrochet_ == child)
        {
            this._rCrochet_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._int_ == oldChild)
        {
            setInt((TInt) newChild);
            return;
        }

        if(this._identificator_ == oldChild)
        {
            setIdentificator((TIdentificator) newChild);
            return;
        }

        if(this._lCrochet_ == oldChild)
        {
            setLCrochet((TLCrochet) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._rCrochet_ == oldChild)
        {
            setRCrochet((TRCrochet) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
