/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.analysis;

import java.util.*;
import lcompil.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAOuExpr(AOuExpr node)
    {
        defaultIn(node);
    }

    public void outAOuExpr(AOuExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpr(AOuExpr node)
    {
        inAOuExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExprOu() != null)
        {
            node.getExprOu().apply(this);
        }
        outAOuExpr(node);
    }

    public void inASimpleExpr(ASimpleExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleExpr(ASimpleExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpr(ASimpleExpr node)
    {
        inASimpleExpr(node);
        if(node.getExprOu() != null)
        {
            node.getExprOu().apply(this);
        }
        outASimpleExpr(node);
    }

    public void inAEtExprOu(AEtExprOu node)
    {
        defaultIn(node);
    }

    public void outAEtExprOu(AEtExprOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExprOu(AEtExprOu node)
    {
        inAEtExprOu(node);
        if(node.getExprOu() != null)
        {
            node.getExprOu().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExprEt() != null)
        {
            node.getExprEt().apply(this);
        }
        outAEtExprOu(node);
    }

    public void inASimpleExprOu(ASimpleExprOu node)
    {
        defaultIn(node);
    }

    public void outASimpleExprOu(ASimpleExprOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprOu(ASimpleExprOu node)
    {
        inASimpleExprOu(node);
        if(node.getExprEt() != null)
        {
            node.getExprEt().apply(this);
        }
        outASimpleExprOu(node);
    }

    public void inAEgalExprEt(AEgalExprEt node)
    {
        defaultIn(node);
    }

    public void outAEgalExprEt(AEgalExprEt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEgalExprEt(AEgalExprEt node)
    {
        inAEgalExprEt(node);
        if(node.getExprEt() != null)
        {
            node.getExprEt().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExprEgal() != null)
        {
            node.getExprEgal().apply(this);
        }
        outAEgalExprEt(node);
    }

    public void inAInfExprEt(AInfExprEt node)
    {
        defaultIn(node);
    }

    public void outAInfExprEt(AInfExprEt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExprEt(AInfExprEt node)
    {
        inAInfExprEt(node);
        if(node.getExprEt() != null)
        {
            node.getExprEt().apply(this);
        }
        if(node.getInferior() != null)
        {
            node.getInferior().apply(this);
        }
        if(node.getExprEgal() != null)
        {
            node.getExprEgal().apply(this);
        }
        outAInfExprEt(node);
    }

    public void inASimpleExprEt(ASimpleExprEt node)
    {
        defaultIn(node);
    }

    public void outASimpleExprEt(ASimpleExprEt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprEt(ASimpleExprEt node)
    {
        inASimpleExprEt(node);
        if(node.getExprEgal() != null)
        {
            node.getExprEgal().apply(this);
        }
        outASimpleExprEt(node);
    }

    public void inAPlusExprEgal(APlusExprEgal node)
    {
        defaultIn(node);
    }

    public void outAPlusExprEgal(APlusExprEgal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExprEgal(APlusExprEgal node)
    {
        inAPlusExprEgal(node);
        if(node.getExprEgal() != null)
        {
            node.getExprEgal().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExprPlus() != null)
        {
            node.getExprPlus().apply(this);
        }
        outAPlusExprEgal(node);
    }

    public void inAMoinsExprEgal(AMoinsExprEgal node)
    {
        defaultIn(node);
    }

    public void outAMoinsExprEgal(AMoinsExprEgal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoinsExprEgal(AMoinsExprEgal node)
    {
        inAMoinsExprEgal(node);
        if(node.getExprEgal() != null)
        {
            node.getExprEgal().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExprPlus() != null)
        {
            node.getExprPlus().apply(this);
        }
        outAMoinsExprEgal(node);
    }

    public void inASimpleExprEgal(ASimpleExprEgal node)
    {
        defaultIn(node);
    }

    public void outASimpleExprEgal(ASimpleExprEgal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprEgal(ASimpleExprEgal node)
    {
        inASimpleExprEgal(node);
        if(node.getExprPlus() != null)
        {
            node.getExprPlus().apply(this);
        }
        outASimpleExprEgal(node);
    }

    public void inAMultiplierExprPlus(AMultiplierExprPlus node)
    {
        defaultIn(node);
    }

    public void outAMultiplierExprPlus(AMultiplierExprPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplierExprPlus(AMultiplierExprPlus node)
    {
        inAMultiplierExprPlus(node);
        if(node.getExprPlus() != null)
        {
            node.getExprPlus().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExprMult() != null)
        {
            node.getExprMult().apply(this);
        }
        outAMultiplierExprPlus(node);
    }

    public void inADiviserExprPlus(ADiviserExprPlus node)
    {
        defaultIn(node);
    }

    public void outADiviserExprPlus(ADiviserExprPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiviserExprPlus(ADiviserExprPlus node)
    {
        inADiviserExprPlus(node);
        if(node.getExprPlus() != null)
        {
            node.getExprPlus().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExprMult() != null)
        {
            node.getExprMult().apply(this);
        }
        outADiviserExprPlus(node);
    }

    public void inASimpleExprPlus(ASimpleExprPlus node)
    {
        defaultIn(node);
    }

    public void outASimpleExprPlus(ASimpleExprPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprPlus(ASimpleExprPlus node)
    {
        inASimpleExprPlus(node);
        if(node.getExprMult() != null)
        {
            node.getExprMult().apply(this);
        }
        outASimpleExprPlus(node);
    }

    public void inANonExprMult(ANonExprMult node)
    {
        defaultIn(node);
    }

    public void outANonExprMult(ANonExprMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExprMult(ANonExprMult node)
    {
        inANonExprMult(node);
        if(node.getNo() != null)
        {
            node.getNo().apply(this);
        }
        if(node.getExprMult() != null)
        {
            node.getExprMult().apply(this);
        }
        outANonExprMult(node);
    }

    public void inASimpleExprMult(ASimpleExprMult node)
    {
        defaultIn(node);
    }

    public void outASimpleExprMult(ASimpleExprMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprMult(ASimpleExprMult node)
    {
        inASimpleExprMult(node);
        if(node.getExprNo() != null)
        {
            node.getExprNo().apply(this);
        }
        outASimpleExprMult(node);
    }

    public void inAParenthesesExprNo(AParenthesesExprNo node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExprNo(AParenthesesExprNo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExprNo(AParenthesesExprNo node)
    {
        inAParenthesesExprNo(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesesExprNo(node);
    }

    public void inASimpleExprNo(ASimpleExprNo node)
    {
        defaultIn(node);
    }

    public void outASimpleExprNo(ASimpleExprNo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprNo(ASimpleExprNo node)
    {
        inASimpleExprNo(node);
        if(node.getExprComplete() != null)
        {
            node.getExprComplete().apply(this);
        }
        outASimpleExprNo(node);
    }

    public void inAFonctionExprComplete(AFonctionExprComplete node)
    {
        defaultIn(node);
    }

    public void outAFonctionExprComplete(AFonctionExprComplete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFonctionExprComplete(AFonctionExprComplete node)
    {
        inAFonctionExprComplete(node);
        if(node.getIdentificator() != null)
        {
            node.getIdentificator().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFonctionExprComplete(node);
    }

    public void inANombreExprComplete(ANombreExprComplete node)
    {
        defaultIn(node);
    }

    public void outANombreExprComplete(ANombreExprComplete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExprComplete(ANombreExprComplete node)
    {
        inANombreExprComplete(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANombreExprComplete(node);
    }

    public void inAMotExprComplete(AMotExprComplete node)
    {
        defaultIn(node);
    }

    public void outAMotExprComplete(AMotExprComplete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMotExprComplete(AMotExprComplete node)
    {
        inAMotExprComplete(node);
        if(node.getLetter() != null)
        {
            node.getLetter().apply(this);
        }
        outAMotExprComplete(node);
    }

    public void inAElementsmultiplesList(AElementsmultiplesList node)
    {
        defaultIn(node);
    }

    public void outAElementsmultiplesList(AElementsmultiplesList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementsmultiplesList(AElementsmultiplesList node)
    {
        inAElementsmultiplesList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getListChainee() != null)
        {
            node.getListChainee().apply(this);
        }
        outAElementsmultiplesList(node);
    }

    public void inAVideList(AVideList node)
    {
        defaultIn(node);
    }

    public void outAVideList(AVideList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideList(AVideList node)
    {
        inAVideList(node);
        outAVideList(node);
    }

    public void inAElementsmultiplesListChainee(AElementsmultiplesListChainee node)
    {
        defaultIn(node);
    }

    public void outAElementsmultiplesListChainee(AElementsmultiplesListChainee node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementsmultiplesListChainee(AElementsmultiplesListChainee node)
    {
        inAElementsmultiplesListChainee(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getListChainee() != null)
        {
            node.getListChainee().apply(this);
        }
        outAElementsmultiplesListChainee(node);
    }

    public void inAVideListChainee(AVideListChainee node)
    {
        defaultIn(node);
    }

    public void outAVideListChainee(AVideListChainee node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListChainee(AVideListChainee node)
    {
        inAVideListChainee(node);
        outAVideListChainee(node);
    }
}
