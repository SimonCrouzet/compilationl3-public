/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.analysis;

import lcompil.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADecVaretfctProgram(ADecVaretfctProgram node);
    void caseADecFctProgram(ADecFctProgram node);
    void caseADecVariablesOptdecvar(ADecVariablesOptdecvar node);
    void caseADeclarationVariablesMultiplesListedecvar(ADeclarationVariablesMultiplesListedecvar node);
    void caseADeclarerVariableListedecvar(ADeclarerVariableListedecvar node);
    void caseAMoreVariablesListedecvarChainee(AMoreVariablesListedecvarChainee node);
    void caseALastListedecvarChainee(ALastListedecvarChainee node);
    void caseADecvarEntierDecvar(ADecvarEntierDecvar node);
    void caseADecvarTableauDecvar(ADecvarTableauDecvar node);
    void caseAListedecfoncRecListedecfonc(AListedecfoncRecListedecfonc node);
    void caseAListedecfoncFinalListedecfonc(AListedecfoncFinalListedecfonc node);
    void caseADecvarinstrDecfonc(ADecvarinstrDecfonc node);
    void caseAInstrDecfonc(AInstrDecfonc node);
    void caseASansparamListeparam(ASansparamListeparam node);
    void caseAAvecparamListeparam(AAvecparamListeparam node);
    void caseAInstraffectInstr(AInstraffectInstr node);
    void caseAInstrblocInstr(AInstrblocInstr node);
    void caseAInstrsiInstr(AInstrsiInstr node);
    void caseAInstrtantqueInstr(AInstrtantqueInstr node);
    void caseAInstrappelInstr(AInstrappelInstr node);
    void caseAInstrretourInstr(AInstrretourInstr node);
    void caseAInstrecritureInstr(AInstrecritureInstr node);
    void caseAInstrvideInstr(AInstrvideInstr node);
    void caseAInstraffect(AInstraffect node);
    void caseAInstrbloc(AInstrbloc node);
    void caseALinstrecListeinst(ALinstrecListeinst node);
    void caseALinstfinalListeinst(ALinstfinalListeinst node);
    void caseAAvecsinonInstrif(AAvecsinonInstrif node);
    void caseASanssinonInstrif(ASanssinonInstrif node);
    void caseAInstrelseif(AInstrelseif node);
    void caseAInstrwhile(AInstrwhile node);
    void caseAInstrappel(AInstrappel node);
    void caseAInstrreturn(AInstrreturn node);
    void caseAInstrwrite(AInstrwrite node);
    void caseAInstrvoid(AInstrvoid node);
    void caseAOuExpr(AOuExpr node);
    void caseASimpleExpr(ASimpleExpr node);
    void caseAEtExprOu(AEtExprOu node);
    void caseASimpleExprOu(ASimpleExprOu node);
    void caseAEgalExprEt(AEgalExprEt node);
    void caseAInfExprEt(AInfExprEt node);
    void caseASimpleExprEt(ASimpleExprEt node);
    void caseAPlusExprEgal(APlusExprEgal node);
    void caseAMoinsExprEgal(AMoinsExprEgal node);
    void caseASimpleExprEgal(ASimpleExprEgal node);
    void caseAMultiplierExprPlus(AMultiplierExprPlus node);
    void caseADiviserExprPlus(ADiviserExprPlus node);
    void caseASimpleExprPlus(ASimpleExprPlus node);
    void caseANonExprMult(ANonExprMult node);
    void caseASimpleExprMult(ASimpleExprMult node);
    void caseANombreExprComplete(ANombreExprComplete node);
    void caseAVarExprComplete(AVarExprComplete node);
    void caseALireExprComplete(ALireExprComplete node);
    void caseAParenthesesExprComplete(AParenthesesExprComplete node);
    void caseAAppelfctExprComplete(AAppelfctExprComplete node);
    void caseAVartabVar(AVartabVar node);
    void caseAVarsimpleVar(AVarsimpleVar node);
    void caseAElementsmultiplesListexpr(AElementsmultiplesListexpr node);
    void caseAVideListexpr(AVideListexpr node);
    void caseAElementsmultiplesListexprChainee(AElementsmultiplesListexprChainee node);
    void caseAVideListexprChainee(AVideListexprChainee node);
    void caseAAvecparamAppelfct(AAvecparamAppelfct node);

    void caseTNumber(TNumber node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEquals(TEquals node);
    void caseTInferior(TInferior node);
    void caseTNo(TNo node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLCrochet(TLCrochet node);
    void caseTRCrochet(TRCrochet node);
    void caseTLAccolade(TLAccolade node);
    void caseTRAccolade(TRAccolade node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElseif(TElseif node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTInt(TInt node);
    void caseTReturn(TReturn node);
    void caseTRead(TRead node);
    void caseTWrite(TWrite node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTIdentificator(TIdentificator node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
