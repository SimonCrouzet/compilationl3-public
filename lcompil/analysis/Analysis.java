/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.analysis;

import lcompil.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAOuExpr(AOuExpr node);
    void caseASimpleExpr(ASimpleExpr node);
    void caseAEtExprOu(AEtExprOu node);
    void caseASimpleExprOu(ASimpleExprOu node);
    void caseAEgalExprEt(AEgalExprEt node);
    void caseAInfExprEt(AInfExprEt node);
    void caseASimpleExprEt(ASimpleExprEt node);
    void caseAPlusExprEgal(APlusExprEgal node);
    void caseAMoinsExprEgal(AMoinsExprEgal node);
    void caseASimpleExprEgal(ASimpleExprEgal node);
    void caseAMultiplierExprPlus(AMultiplierExprPlus node);
    void caseADiviserExprPlus(ADiviserExprPlus node);
    void caseASimpleExprPlus(ASimpleExprPlus node);
    void caseANonExprMult(ANonExprMult node);
    void caseASimpleExprMult(ASimpleExprMult node);
    void caseAParenthesesExprNo(AParenthesesExprNo node);
    void caseASimpleExprNo(ASimpleExprNo node);
    void caseAFonctionExprComplete(AFonctionExprComplete node);
    void caseANombreExprComplete(ANombreExprComplete node);
    void caseAMotExprComplete(AMotExprComplete node);
    void caseAElementsmultiplesList(AElementsmultiplesList node);
    void caseAVideList(AVideList node);
    void caseAElementsmultiplesListChainee(AElementsmultiplesListChainee node);
    void caseAVideListChainee(AVideListChainee node);

    void caseTNumber(TNumber node);
    void caseTWord(TWord node);
    void caseTLetter(TLetter node);
    void caseTLetterMin(TLetterMin node);
    void caseTIdentificator(TIdentificator node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEquals(TEquals node);
    void caseTInferior(TInferior node);
    void caseTNo(TNo node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTBlank(TBlank node);
    void caseTComma(TComma node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
