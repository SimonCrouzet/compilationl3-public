/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.analysis;

import java.util.*;
import lcompil.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExpr(AOuExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExpr(ASimpleExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExprOu(AEtExprOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprOu(ASimpleExprOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalExprEt(AEgalExprEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExprEt(AInfExprEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprEt(ASimpleExprEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExprEgal(APlusExprEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsExprEgal(AMoinsExprEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprEgal(ASimpleExprEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplierExprPlus(AMultiplierExprPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiviserExprPlus(ADiviserExprPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprPlus(ASimpleExprPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonExprMult(ANonExprMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprMult(ASimpleExprMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesesExprNo(AParenthesesExprNo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExprNo(ASimpleExprNo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFonctionExprComplete(AFonctionExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreExprComplete(ANombreExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMotExprComplete(AMotExprComplete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementsmultiplesList(AElementsmultiplesList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideList(AVideList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementsmultiplesListChainee(AElementsmultiplesListChainee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListChainee(AVideListChainee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWord(TWord node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLetter(TLetter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLetterMin(TLetterMin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificator(TIdentificator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInferior(TInferior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNo(TNo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
