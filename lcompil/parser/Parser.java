/* This file was generated by SableCC (http://www.sablecc.org/). */

package lcompil.parser;

import lcompil.lexer.*;
import lcompil.node.*;
import lcompil.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PExpr node1 = (PExpr) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AOuExpr */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASimpleExpr */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AEtExprOu */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ASimpleExprOu */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AEgalExprEt */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AInfExprEt */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ASimpleExprEt */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce APlusExprEgal */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AMoinsExprEgal */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ASimpleExprEgal */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AMultiplierExprPlus */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce ADiviserExprPlus */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce ASimpleExprPlus */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce ANonExprMult */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ASimpleExprMult */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AParenthesesExprNo */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ASimpleExprNo */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AFonctionExprComplete */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce ANombreExprComplete */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AMotExprComplete */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AElementsmultiplesList */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AVideList */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AElementsmultiplesListChainee */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list, false);
            }
            break;
            case 23: /* reduce AVideListChainee */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AOuExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOr torNode3;
        PExprOu pexprouNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexprouNode4 = (PExprOu)nodeArrayList3.get(0);

        pexprNode1 = new AOuExpr(pexprNode2, torNode3, pexprouNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASimpleExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExprOu pexprouNode2;
        pexprouNode2 = (PExprOu)nodeArrayList1.get(0);

        pexprNode1 = new ASimpleExpr(pexprouNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEtExprOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprOu pexprouNode1;
        {
            // Block
        PExprOu pexprouNode2;
        TAnd tandNode3;
        PExprEt pexpretNode4;
        pexprouNode2 = (PExprOu)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpretNode4 = (PExprEt)nodeArrayList3.get(0);

        pexprouNode1 = new AEtExprOu(pexprouNode2, tandNode3, pexpretNode4);
        }
	nodeList.add(pexprouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASimpleExprOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprOu pexprouNode1;
        {
            // Block
        PExprEt pexpretNode2;
        pexpretNode2 = (PExprEt)nodeArrayList1.get(0);

        pexprouNode1 = new ASimpleExprOu(pexpretNode2);
        }
	nodeList.add(pexprouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AEgalExprEt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprEt pexpretNode1;
        {
            // Block
        PExprEt pexpretNode2;
        TEquals tequalsNode3;
        PExprEgal pexpregalNode4;
        pexpretNode2 = (PExprEt)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpregalNode4 = (PExprEgal)nodeArrayList3.get(0);

        pexpretNode1 = new AEgalExprEt(pexpretNode2, tequalsNode3, pexpregalNode4);
        }
	nodeList.add(pexpretNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AInfExprEt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprEt pexpretNode1;
        {
            // Block
        PExprEt pexpretNode2;
        TInferior tinferiorNode3;
        PExprEgal pexpregalNode4;
        pexpretNode2 = (PExprEt)nodeArrayList1.get(0);
        tinferiorNode3 = (TInferior)nodeArrayList2.get(0);
        pexpregalNode4 = (PExprEgal)nodeArrayList3.get(0);

        pexpretNode1 = new AInfExprEt(pexpretNode2, tinferiorNode3, pexpregalNode4);
        }
	nodeList.add(pexpretNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASimpleExprEt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprEt pexpretNode1;
        {
            // Block
        PExprEgal pexpregalNode2;
        pexpregalNode2 = (PExprEgal)nodeArrayList1.get(0);

        pexpretNode1 = new ASimpleExprEt(pexpregalNode2);
        }
	nodeList.add(pexpretNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce APlusExprEgal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprEgal pexpregalNode1;
        {
            // Block
        PExprEgal pexpregalNode2;
        TPlus tplusNode3;
        PExprPlus pexprplusNode4;
        pexpregalNode2 = (PExprEgal)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexprplusNode4 = (PExprPlus)nodeArrayList3.get(0);

        pexpregalNode1 = new APlusExprEgal(pexpregalNode2, tplusNode3, pexprplusNode4);
        }
	nodeList.add(pexpregalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMoinsExprEgal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprEgal pexpregalNode1;
        {
            // Block
        PExprEgal pexpregalNode2;
        TMinus tminusNode3;
        PExprPlus pexprplusNode4;
        pexpregalNode2 = (PExprEgal)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexprplusNode4 = (PExprPlus)nodeArrayList3.get(0);

        pexpregalNode1 = new AMoinsExprEgal(pexpregalNode2, tminusNode3, pexprplusNode4);
        }
	nodeList.add(pexpregalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASimpleExprEgal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprEgal pexpregalNode1;
        {
            // Block
        PExprPlus pexprplusNode2;
        pexprplusNode2 = (PExprPlus)nodeArrayList1.get(0);

        pexpregalNode1 = new ASimpleExprEgal(pexprplusNode2);
        }
	nodeList.add(pexpregalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMultiplierExprPlus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprPlus pexprplusNode1;
        {
            // Block
        PExprPlus pexprplusNode2;
        TMult tmultNode3;
        PExprMult pexprmultNode4;
        pexprplusNode2 = (PExprPlus)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexprmultNode4 = (PExprMult)nodeArrayList3.get(0);

        pexprplusNode1 = new AMultiplierExprPlus(pexprplusNode2, tmultNode3, pexprmultNode4);
        }
	nodeList.add(pexprplusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADiviserExprPlus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprPlus pexprplusNode1;
        {
            // Block
        PExprPlus pexprplusNode2;
        TDiv tdivNode3;
        PExprMult pexprmultNode4;
        pexprplusNode2 = (PExprPlus)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexprmultNode4 = (PExprMult)nodeArrayList3.get(0);

        pexprplusNode1 = new ADiviserExprPlus(pexprplusNode2, tdivNode3, pexprmultNode4);
        }
	nodeList.add(pexprplusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASimpleExprPlus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprPlus pexprplusNode1;
        {
            // Block
        PExprMult pexprmultNode2;
        pexprmultNode2 = (PExprMult)nodeArrayList1.get(0);

        pexprplusNode1 = new ASimpleExprPlus(pexprmultNode2);
        }
	nodeList.add(pexprplusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANonExprMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMult pexprmultNode1;
        {
            // Block
        TNo tnoNode2;
        PExprMult pexprmultNode3;
        tnoNode2 = (TNo)nodeArrayList1.get(0);
        pexprmultNode3 = (PExprMult)nodeArrayList2.get(0);

        pexprmultNode1 = new ANonExprMult(tnoNode2, pexprmultNode3);
        }
	nodeList.add(pexprmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASimpleExprMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMult pexprmultNode1;
        {
            // Block
        PExprNo pexprnoNode2;
        pexprnoNode2 = (PExprNo)nodeArrayList1.get(0);

        pexprmultNode1 = new ASimpleExprMult(pexprnoNode2);
        }
	nodeList.add(pexprmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AParenthesesExprNo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprNo pexprnoNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexprnoNode1 = new AParenthesesExprNo(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pexprnoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASimpleExprNo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprNo pexprnoNode1;
        {
            // Block
        PExprComplete pexprcompleteNode2;
        pexprcompleteNode2 = (PExprComplete)nodeArrayList1.get(0);

        pexprnoNode1 = new ASimpleExprNo(pexprcompleteNode2);
        }
	nodeList.add(pexprnoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFonctionExprComplete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprComplete pexprcompleteNode1;
        {
            // Block
        TIdentificator tidentificatorNode2;
        TLPar tlparNode3;
        PList plistNode4;
        TRPar trparNode5;
        tidentificatorNode2 = (TIdentificator)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plistNode4 = (PList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexprcompleteNode1 = new AFonctionExprComplete(tidentificatorNode2, tlparNode3, plistNode4, trparNode5);
        }
	nodeList.add(pexprcompleteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANombreExprComplete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprComplete pexprcompleteNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexprcompleteNode1 = new ANombreExprComplete(tnumberNode2);
        }
	nodeList.add(pexprcompleteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AMotExprComplete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprComplete pexprcompleteNode1;
        {
            // Block
        TLetter tletterNode2;
        tletterNode2 = (TLetter)nodeArrayList1.get(0);

        pexprcompleteNode1 = new AMotExprComplete(tletterNode2);
        }
	nodeList.add(pexprcompleteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AElementsmultiplesList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        PExpr pexprNode2;
        PListChainee plistchaineeNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        plistchaineeNode3 = (PListChainee)nodeArrayList2.get(0);

        plistNode1 = new AElementsmultiplesList(pexprNode2, plistchaineeNode3);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AVideList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PList plistNode1;
        {
            // Block

        plistNode1 = new AVideList();
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AElementsmultiplesListChainee */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListChainee plistchaineeNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        PListChainee plistchaineeNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        plistchaineeNode4 = (PListChainee)nodeArrayList3.get(0);

        plistchaineeNode1 = new AElementsmultiplesListChainee(tcommaNode2, pexprNode3, plistchaineeNode4);
        }
	nodeList.add(plistchaineeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AVideListChainee */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListChainee plistchaineeNode1;
        {
            // Block

        plistchaineeNode1 = new AVideListChainee();
        }
	nodeList.add(plistchaineeNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 3}, {14, SHIFT, 14}, },
			{{-1, ERROR, 4}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 5}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 6}, {5, SHIFT, 17}, {17, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, {6, SHIFT, 18}, },
			{{-1, REDUCE, 3}, {11, SHIFT, 19}, {12, SHIFT, 20}, },
			{{-1, REDUCE, 6}, {7, SHIFT, 21}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 9}, {9, SHIFT, 23}, {10, SHIFT, 24}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 21}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 16}, {5, SHIFT, 17}, {15, SHIFT, 27}, },
			{{-1, ERROR, 17}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 18}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 19}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 20}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 21}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 22}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 23}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, ERROR, 24}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, REDUCE, 23}, {5, SHIFT, 17}, {16, SHIFT, 36}, },
			{{-1, ERROR, 26}, {15, SHIFT, 38}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 0}, {6, SHIFT, 18}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 19}, {12, SHIFT, 20}, },
			{{-1, REDUCE, 4}, {7, SHIFT, 21}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 5}, {7, SHIFT, 21}, {8, SHIFT, 22}, },
			{{-1, REDUCE, 7}, {9, SHIFT, 23}, {10, SHIFT, 24}, },
			{{-1, REDUCE, 8}, {9, SHIFT, 23}, {10, SHIFT, 24}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 36}, {0, SHIFT, 1}, {2, SHIFT, 2}, {4, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 23}, {5, SHIFT, 17}, {16, SHIFT, 36}, },
			{{-1, REDUCE, 22}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 6}, {5, 16}, {14, 25}, {36, 39}, },
			{{-1, 7}, {17, 28}, },
			{{-1, 8}, {18, 29}, },
			{{-1, 9}, {19, 30}, {20, 31}, },
			{{-1, 10}, {21, 32}, {22, 33}, },
			{{-1, 11}, {4, 15}, {23, 34}, {24, 35}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 26}, },
			{{-1, 37}, {39, 40}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: number, letter, identificator, '!', '('",
			"expecting: '|', '&', '+', '-', '*', '/', '"', '<', ')', ',', EOF",
			"expecting: '('",
			"expecting: '|', EOF",
			"expecting: '|', '&', ')', ',', EOF",
			"expecting: '|', '&', '"', '<', ')', ',', EOF",
			"expecting: '|', '&', '+', '-', '"', '<', ')', ',', EOF",
			"expecting: number, letter, identificator, '!', '(', ')'",
			"expecting: '|', ')'",
			"expecting: '|', ')', ','",
			"expecting: ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 0, 0, 3, 4, 5, 6, 1, 1, 1, 1, 7, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 1, 4, 5, 6, 6, 1, 1, 1, 1, 0, 10, 1, 9, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
