Package lcompil;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens
	number = chiffre+;
	or = '|';
	and = '&';
	plus ='+';
	minus ='-';
	mult ='*';
	div ='/';
	equals = '=';
	inferior = '<';
	no = '!';
	l_par ='(';
	r_par =')';
	l_crochet = '[';
	r_crochet = ']';
	l_accolade = '{';
	r_accolade = '}';
	if = 'si';
	then = 'alors';
	elseif = 'sinon';
	while = 'tantque';
	do = 'faire';
	int = 'entier';
	return = 'retour';
	read = 'lire';
	write = 'ecrire';
	blank = (' ' | 13 | 10)+;
	comment = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
	comma = ',';
	semicolon = ';';
	identificator = alpha alphanum*;

Ignored Tokens
	blank, comment;
	
Productions

    program =
        {dec_varetfct} optdecvar listedecfonc |
        {dec_fct} listedecfonc;

    optdecvar =
        {dec_variables} listedecvar semicolon;

    listedecvar =
        {declaration_variables_multiples} decvar listedecvar_chainee |
        {declarer_variable} decvar;

    listedecvar_chainee =
        {more_variables} comma decvar listedecvar_chainee |
        {last} comma decvar ;

    decvar =
        {decvar_entier} int identificator |
        {decvar_tableau} int identificator l_crochet number r_crochet ;

    listedecfonc =
        {listedecfonc_rec} decfonc listedecfonc |
        {listedecfonc_final} ;

    decfonc =
        {decvarinstr} identificator listeparam optdecvar instrbloc |
        {instr} identificator listeparam instrbloc;

    listeparam =
        {sansparam} l_par r_par |
        {avecparam} l_par listedecvar r_par ;

    instr =
        {instraffect} instraffect |
        {instrbloc } instrbloc |
        {instrsi } instrif |
        {instrtantque } instrwhile |
        {instrappel } instrappel |
        {instrretour } instrreturn |
        {instrecriture } instrwrite |
        {instrvide} instrvoid ;

    instraffect = var equals expr semicolon ;

    instrbloc = l_accolade listeinst r_accolade ;

    listeinst =
        {linstrec} instr listeinst |
        {linstfinal} ;

    instrif =
        {avecsinon} if expr then instrbloc instrelseif|
        {sanssinon} if expr then instrbloc ;

    instrelseif = elseif instrbloc ;

    instrwhile = while expr do instrbloc ;

    instrappel = appelfct semicolon ;

    instrreturn = return expr semicolon ;

    instrwrite = write l_par expr r_par semicolon ;

    instrvoid = semicolon ;



	expr =
		{ou} expr or expr_ou |
		{simple} expr_ou;
		
	expr_ou =
		{et} expr_ou and expr_et |
		{simple} expr_et;
		
	expr_et =
		{egal} expr_et equals expr_egal |
		{inf} expr_et inferior expr_egal |
		{simple} expr_egal;
		
	expr_egal =
		{plus} expr_egal plus expr_plus |
		{moins} expr_egal minus expr_plus |
		{simple} expr_plus;
		
	expr_plus =
		{multiplier} expr_plus mult expr_mult |
		{diviser} expr_plus div expr_mult |
		{simple} expr_mult;
		
	expr_mult =
		{non} no expr_mult |
		{simple} expr_complete;
		
	expr_complete =
		{nombre} number |
		{var} var |
		{lire} read l_par r_par |
		{parentheses} l_par expr r_par |
		{appelfct} appelfct;

	var =
	    {vartab} identificator l_crochet expr r_crochet |
        {varsimple} identificator ;

		
	listexpr =
		{elementsmultiples} expr listexpr_chainee |
		{vide} ;
		
	listexpr_chainee =
		{elementsmultiples} comma expr listexpr_chainee |
		{vide} ;


    appelfct =
        {avecparam} identificator l_par listexpr r_par ;